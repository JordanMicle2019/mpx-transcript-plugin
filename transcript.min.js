var words = [];
var wordsIndex = [];
var paragraphIndex = [];
var searchKey = "";
var mediaDuration = null;
var currentWord = 0;
var wordStausTimer = null;
var mediaStatus = false;
var isScrolling = true;
var mediaPID = null;
var currentTime = 0;
var totalSearchWords = 0;
var currentSearchWordsIndex = 0;
var eventFiredFlag = false;

function insertComponents() {
  var targetComponent = $("#transcript-container");
  var childComponent = `
            <div class="transcript-progress-bar">
                <div class="progress-bar-status">
                </div>
                <div class="search-marker-container">

                </div>
            </div>
            <div class="transcript-control-bar">
                <div class="searchbox-container">
                    <input type="text" class="searchbox" placeholder="Search Transcript..." />
                    <div id="search_focus">
                      <span class="pad-10" id="search_status">0/0</span>
                      <span class="splitter"></span>
                      <i class="fa fa-angle-up pad-10 disabled" id="search_up"></i>
                      <i class="fa fa-angle-down pad-10 disabled" id="search_down"></i>
                      <i class="fa fa-times pad-10" id="close_search_focus"></i>
                    </div>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" class="checkbox-for-scroll" checked/> <label>auto-scroll</label>
                </div>
            </div>
            <div class="transcript-content">
            </div>
            <div class="transcript-bottom-bar">
            </div>
    `;
  targetComponent.html(childComponent);
}

function findNearestValue(value) {
  if (wordsIndex.length) {
    var closest = wordsIndex.reduce((a, b) => {
      return Math.abs(b - value) < Math.abs(a - value) ? b : a;
    });
    return wordsIndex.indexOf(closest);
  } else {
    return 0;
  }
}

// Update progress bar and transcript with search key
function updateTranscript() {
  $(".search-marker-container").empty();
  $(".transcript-content").empty();
  wordsIndex = [];

  var paragraph = $("<p></p>");

  for (var i = 0, len = words.length; i < len; i++) {
    wordsIndex.push(parseInt(words[i][0]));

    if (words[i][1]) {
      if (i && paragraphIndex.includes(parseInt(words[i][0]))) {
        $(".transcript-content").append(paragraph);
        paragraph = $("<p></p>");
      }

      var scriptElement = $("<span></span>");
      scriptElement.attr("data-ms", words[i][0]);
      scriptElement.attr("id", "00_" + words[i][0]);
      scriptElement.addClass("transcript-element");
      scriptElement.html(words[i][1]);
      paragraph.append(scriptElement);
    }
  }
  $(".transcript-content").append(paragraph);
}

function updateSearch() {
  $(".search-marker-container").empty();
  $("div.transcript-content>p>span").removeClass("marked");
  //For Search Component part
  totalSearchWords = 0;
  currentSearchWordsIndex = 0;

  for (var i = 0, len = words.length; i < len; i++) {
    if (words[i][1] && searchKey && words[i][1].toLowerCase().includes(searchKey.toLowerCase())) {
      $("#00_" + words[i][0]).addClass("marked");
      var timeLine = words[i][0] / mediaDuration * 100;
      var marker = document.createElement('span');
      marker.className = "transcript-search-marker";
      marker.style.cssText = "left:" + timeLine + "%";
      marker.setAttribute("data-ms", words[i][0]);
      var parentNode = document.querySelector(".search-marker-container");
      parentNode.appendChild(marker);

      // For Search Component part
      totalSearchWords++;
    }
  }
  updateSearchComponent();
}

function updateSearchComponent() {
  $("div.transcript-content>p>span").removeClass("active");
  $("div.search-marker-container>span.transcript-search-marker").removeClass("active")
  var searchStatus = totalSearchWords ? currentSearchWordsIndex + 1 + "/" + totalSearchWords : 0 + "/" + totalSearchWords;
  $("#search_status").html(searchStatus);

  if (totalSearchWords) {
    $("div.transcript-content>p>span.marked")[currentSearchWordsIndex].classList.add("active");
    $("div.search-marker-container>span.transcript-search-marker")[currentSearchWordsIndex].classList.add("active");
    $(".transcript-content").animate({
      scrollTop: $("div.transcript-content>p>span.marked.active").offset().top - $(".transcript-content").offset().top + $(".transcript-content").scrollTop()
    }, 100);
    if (currentSearchWordsIndex == 0) {
      $("#search_up").addClass("disabled");
      $("#search_down").removeClass("disabled");
    } else if (currentSearchWordsIndex == totalSearchWords - 1) {
      $("#search_up").removeClass("disabled");
      $("#search_down").addClass("disabled");
    } else {
      $("#search_up").removeClass("disabled");
      $("#search_down").removeClass("disabled");
    }
  } else {
    $("#search_up").addClass("disabled");
    $("#search_down").addClass("disabled");
  }
}

function connectIframeMPX(iframeComponent) {
  //Initialize transcript component
  $pdk.bind(iframeComponent, true);
  $pdk.controller.setIFrame(iframeComponent, true);
  words = [];
  wordsIndex = [];
  paragraphIndex = [];
  searchKey = "";
  mediaDuration = null;
  currentWord = 0;
  currentTime = 0
  mediaStatus = false;
  isScrolling = true;
  mediaPID = null;
  totalSearchWords = 0;
  currentSearchWordsIndex = 0;
  insertComponents();
  clearInterval(wordStausTimer);

  $pdk.controller.addEventListener("OnPlayerLoaded", function () {
    var timer = setInterval(function () {
      if (mediaPID) {
        clearInterval(timer);
        fetch(`https://ikonik.vo.llnwd.net/gatewaynetwork/timedtext/${mediaPID}.json`)
          .then(response => response.json())
          .then(res => {
            words = res.words;
            paragraphIndex = res.paragraphs;
            updateTranscript();
          })
          .catch((error) => {
            console.error('Error:', error);
          });
      }
    }, 10);
  });

  $pdk.controller.addEventListener("OnMediaPlaying", function (time) {
    clearInterval(wordStausTimer);
    currentTime = time.data.currentTimeAggregate
    $(".progress-bar-status").css("width", currentTime / mediaDuration * 100 + "%");

    if (isScrolling && words[currentWord]) {
      $(".transcript-content").animate({
        scrollTop: $("#00_" + words[currentWord][0]).offset().top - $(".transcript-content").offset().top + $(".transcript-content").scrollTop()
      }, 100);
    }

    wordStausTimer = setInterval(function () {
      if (mediaStatus) {
        currentTime += 1;
        if (words[currentWord] && currentTime >= parseInt(words[currentWord][0])) {
          $("#00_" + words[currentWord][0]).addClass("current");
          currentWord++;
          if (currentWord > 1 && $("#00_" + words[currentWord - 2][0]).hasClass("current")) {
            $("#00_" + words[currentWord - 2][0]).removeClass("current");
          }
        }
      }
    }, 1);

  });

  $pdk.controller.addEventListener("OnMediaUnpause", function () {
    mediaStatus = true;
  });

  $pdk.controller.addEventListener("OnMediaPause", function () {
    mediaStatus = false;
  });

  $pdk.controller.addEventListener("OnMediaSeekStart", function () {
    mediaStatus = false;
  });

  $pdk.controller.addEventListener("OnMediaSeekComplete", function (time) {
    mediaStatus = true;
    if (currentWord && $("#00_" + words[currentWord - 1][0]).hasClass("current")) {
      $("#00_" + words[currentWord - 1][0]).removeClass("current");
    }

    var seekTarget = time.data.end.currentTimeAggregate;
    currentWord = findNearestValue(seekTarget);
    currentTime = time.data.end.currentTimeAggregate;
  });

  $pdk.controller.addEventListener("OnMediaBufferStart", function () {
    mediaStatus = false;
  });

  $pdk.controller.addEventListener("OnMediaBufferComplete", function () {
    mediaStatus = true;
  });

  $pdk.controller.addEventListener("OnMediaError", function () {
    clearInterval(wordStausTimer);
    mediaStatus = false;
  });

  $pdk.controller.addEventListener("OnMediaStart", function (media) {
    mediaStatus = true;
    if (!mediaDuration) mediaDuration = media.data.endTime;
    currentWord = 0;
  });

  $pdk.controller.addEventListener("OnReleasePreview", function (media) {
    mediaDuration = media.data.duration;
    mediaPID = media.data.mediaPID;
  });

  $pdk.controller.addEventListener("OnMediaEnd", function () {
    clearInterval(wordStausTimer);
    $(".progress-bar-status").css("width", 0 + "%");
    if (currentWord && $("#00_" + words[currentWord - 1][0]).hasClass("current")) {
      $("#00_" + words[currentWord - 1][0]).removeClass("current");
    }
  });
}

function addLoadEvent(iframeComponent) {
  iframeComponent.onload = function () {
    eventFiredFlag = true;
    connectIframeMPX(iframeComponent);
  }
  iframeComponent.setAttribute('data-add', true);
}
// $pdk.controller.addEventListener("OnPlayerLoaded", function () {
//   var iFrame = document.getElementById("player-iframe");
//   if (!iFrame.getAttribute('data-add')) {
//     connectIframeMPX(iFrame);
//   }
// });

var initialFrame = document.getElementById("player-iframe");
if (!initialFrame.getAttribute('data-add')) {
  addLoadEvent(initialFrame);
}

var loadChecker = setInterval(function() {
  console.log($pdk.controller.ready);
}, 100);

$(document).on("click", ".transcript-element", function () {
  clearInterval(wordStausTimer);
  var posSecond = $(this).data("ms");
  $pdk.controller.seekTo(posSecond);
});

$(document).on("focus", ".searchbox", function () {
  $("#search_focus").show();
});

$(document).on("click", "#search_up", function () {
  currentSearchWordsIndex && currentSearchWordsIndex--;
  updateSearchComponent();
});

$(document).on("click", "#search_down", function () {
  if (currentSearchWordsIndex < totalSearchWords - 1) {
    currentSearchWordsIndex += 1;
    updateSearchComponent();
  }
});

$(document).on("click", "#close_search_focus", function () {
  $("#search_focus").hide();
  $('.searchbox').val('');
  searchKey = "";
  updateSearch();
});

$(document).on("change keyup", ".searchbox", function () {
  var tempKey = $(this).val();
  if (tempKey) {
    if (tempKey != searchKey) {
      searchKey = tempKey;
      // updateTranscript();
      updateSearch();
    }
    return;
  }
  searchKey = "";
  // updateTranscript();
  updateSearch();
});

$(document).on("click", ".transcript-progress-bar", function (evt) {
  clearInterval(wordStausTimer);
  var div = $(evt.currentTarget);
  var offset = div.offset();
  var x = evt.clientX - offset.left;
  var posPercentage = x / div.width() * 100;
  $pdk.controller.seekToPercentage(posPercentage);
});

$(document).on("change", ".checkbox-for-scroll", function () {
  var isChecked = $(this).is(":checked");
  if (isChecked) isScrolling = true;
  else isScrolling = false;
});

$("#root").bind('DOMSubtreeModified', function () {
  var playerFrame = document.getElementById("root").querySelector("#player-iframe");
  if (playerFrame) {
    if (playerFrame.getAttribute('data-add')) {
      return;
    } else {
      addLoadEvent(playerFrame);
    }
  }
});